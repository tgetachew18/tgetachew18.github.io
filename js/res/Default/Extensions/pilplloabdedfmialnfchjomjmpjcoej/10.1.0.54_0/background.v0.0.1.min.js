webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Consts = __webpack_require__(1);

	var _LoggerService = __webpack_require__(2);

	var _LoggerService2 = _interopRequireDefault(_LoggerService);

	var _ConfigurationService = __webpack_require__(18);

	var _ConfigurationService2 = _interopRequireDefault(_ConfigurationService);

	var _EventsService = __webpack_require__(11);

	var _EventsService2 = _interopRequireDefault(_EventsService);

	var _ServiceFactory = __webpack_require__(7);

	var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Include all the components that exist in the engine and run the bootstrap process that loads the
	// configuration and run the components


	var conf = new _ConfigurationService2.default();
	var configuration = void 0;

	window.onerror = function errorHandler(errorMsg, url, lineNumber) {
	    _LoggerService2.default.debug(errorMsg);
	    _LoggerService2.default.track('window-error', errorMsg + ' ' + lineNumber, true);
	    return false;
	};

	conf.load().then(function () {

	    try {
	        configuration = conf.getConfiguration();
	        _LoggerService2.default.debug("Configuration loaded");
	        var extensionComponentKeys = Object.keys(configuration.components);
	        var loadedApp = false;

	        for (var i = 0; !loadedApp && i < extensionComponentKeys.length; i++) {

	            var component = configuration.components[extensionComponentKeys[i]];

	            if (component.type === _Consts.BACKGROUND_TAB_TYPE) {
	                loadedApp = true;
	                _ServiceFactory2.default.load(component);
	            } else if (component.type === _Consts.COMMON_COMPONENTS_TYPE) {
	                _ServiceFactory2.default.load(component);
	            }
	        }

	        if (loadedApp) {
	            _EventsService2.default.trigger(_Consts.BACKGROUND_LOADED_EVENT);
	            _LoggerService2.default.debug('Background loaded');
	        } else {
	            _LoggerService2.default.track('failed-init');
	            _LoggerService2.default.debug("Background loaded failed to load");
	        }
	    } catch (ex) {
	        _LoggerService2.default.track('error-init', ex.message);
	    }
	}).catch(function (e) {
	    _LoggerService2.default.track('error-load-init', e.message);
	});

/***/ }
]);