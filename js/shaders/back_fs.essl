shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	varying vec2 texCoord;
	uniform vec3 lightPos[1];
	uniform vec3 lightPowerDensity[1];
	uniform mat4 quadrics[64];
	uniform vec4 brdfs[32];
	uniform vec4 properties[32];
	varying vec3 rayDir;
	uniform samplerCube envmapTexture;
	varying vec4 eyepos;
	float BEACHBALL = 0.0;
	float ISLAND = 1.0;
	float OCEAN = 2.0;
	float SKY =  4.0;
	float CASTLE = 3.0;
	float CASTLEROOF  = 6.0;
	float intersectQuadric(mat4 A, vec4 e, vec4 d){
		//Coefficient matrix : A
		// Ray origin: e
		//Ray direction d

		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float discriminant = b * b - 4.0*a*c;
		if (discriminant < 0.0){
			return -1.0;
		}
		float t1 = (-b - sqrt(discriminant))/(2.0*a);
		float t2 = (-b + sqrt(discriminant))/(2.0*a);
		float t = min(t1, t2);
		if (t > 0.0){
			return t;
		}

		return max(t1, t2);
	

	}

	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d){


		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float discriminant = b * b - 4.0*a*c;
		if (discriminant < 0.0){
			return -1.0;
		}
		float t1 = (-b - sqrt(discriminant))/(2.0*a);
		vec4 r1 = e + d * t1;
		float r1inB = dot(r1 * B, r1);
		if (r1inB > 0.0){
			t1 = -1.0;
		}
		float t2 = (-b + sqrt(discriminant))/(2.0*a);		
		vec4 r2 = e + d * t2;
		float r2inB = dot(r2 * B, r2);
		if (r2inB > 0.0){
			t2 = -1.0;
		}

		float t = min(t1, t2);
		if (t >= 0.0){
			return t;
		}
	
		return max(t1, t2);
	
		



	}

	float findBestHit( vec4 e, vec4 d,out mat4 bestA, out vec4 bestBrdf, out vec4 bestProp){
		float bestT = 1000000000.0 ; //infinity
		vec4 property;
		for (int i = 0; i < 44; i+=2){
			mat4 A = quadrics[i];
			mat4 B = quadrics[i+1];
			property = properties[i/2];
			vec4 brdf = brdfs[i/2];
			float tempT = intersectClippedQuadric(A, B, e, d);
			if (tempT >= 0.0){	
						if (tempT < bestT){
							bestT = tempT;
							bestA = A;
							bestProp = property;
							bestBrdf = brdf;
						}
						
			}
		}
		if (bestT  ==   1000000000.0){
			return -1.0;
		}
		return bestT;

	}



	vec4 beachBallTexture(vec4 surface, float x, float y, float z){
		vec4 final;
		vec4 r = surface - vec4(x,y,z,0.0);


		float theta = degrees(acos(-r.y/length(r)));
		float phi = degrees(atan(r.z/r.x));
		   if (phi >-90.0 && phi < -45.0 && theta > 0.0 && theta < 180.0){
				final = vec4(1,0,0,1);		
		   }

			else if (phi >-45.0 && phi < 0.0 && theta > 0.0 && theta < 180.0){
				final = vec4(0,0,1,1);		
		   }
		   else if (phi >0.0 && phi < 45.0 && theta > 0.0 && theta < 180.0){
				final = vec4(0,1,0,1);		
		   }
		   else{
		   		final = vec4(1,1,0,1);
		   }


		return final;
	}

	vec4 Diffuse(vec4 n, vec3 lightpos, vec4 color, vec4 r){
			 //	Diffuse & Ambient lighting
			vec3 L = -normalize(lightpos - r.xyz); //light positoin
			float lambertTerm  = clamp(dot(n.xyz, -L), 0.0, 1.0);
			vec4 lDiffuse =  vec4(1, 0.8, 0.8, 0.8)* color * lambertTerm;
			vec4 lAmbient = 0.3 * color;
			vec4 final = lAmbient + lDiffuse;
			final.w = 0.0;
			return final;
		}


	vec4 phongblinn(vec4 n, vec4 eyepos, vec3 lightpos){
		//Phongblin
		vec3 eyeVec = vec3(eyepos  );
		vec3 E = normalize(eyepos.xyz);
		vec3 R = reflect(-normalize(lightpos), normalize(n.xyz));
		float specular = pow(max(dot(R, E), 0.0), 40.0);
		vec4 lSpecular =  vec4(1, 0, 0, 0.0)* specular;
		return lSpecular;

	}

	vec4 shadows(vec4 final, vec4 r, mat4 bestA){	
		 for (int i = 0; i < 1; i++){ // Implements shadows
		 	vec3 lightdirection = normalize( r.xyz - lightPos[i] );
		 	vec4 dummy;
		 	float shadow_t = findBestHit( vec4(lightPos[i],1) , vec4(lightdirection, 0), bestA, dummy, dummy);
		 	if (shadow_t > 0.0){
		 			vec3 r_shadow =  lightPos[i] + lightdirection * shadow_t;
		 			float srctoShadow = distance(lightPos[i], r_shadow);
		 			float srctoPoint = distance(lightPos[i], r.xyz);
		 			if (srctoShadow + 2.2  <= srctoPoint){
		 				 final *= 0.4;
		 			}
		 	}
		 
		 }
		 return final;
	}


	vec4 shade(vec4 r, vec4 brdf, vec4 n, vec4 eyepos, vec3 lightpos, vec4 bestProp, mat4 bestA){
		vec4 final = vec4(0, 0, 0, 0);
		vec4 finalColor = vec4(0, 0, 0, 0);
		if (bestProp.x == BEACHBALL){
			finalColor = beachBallTexture(r, -bestA[0][3], -bestA[1][3], -bestA[2][3]);
		}
		else if (bestProp.x == ISLAND){
			finalColor =vec4(238./255., 214./255., 175./255.,1);
			finalColor = shadows(finalColor, r, bestA);

		}
		else if (bestProp.x  ==  SKY){
			finalColor = textureCube(envmapTexture, rayDir);

		}
		else if (bestProp.x == CASTLE){
			finalColor = vec4(0.761,0.698,0.502, 1.);
		}
		else if (bestProp.x  == CASTLEROOF){
			finalColor  = vec4(1.0,0.2,0.8,1.0);
		}

		
		if (brdf.a < 200.){ //Diffuse
			final += Diffuse(n, lightpos,finalColor, r);
			if (brdf.a == 0.){ //Also apply phong blingy
				final += phongblinn(n, eyepos, lightpos);
			}
		}
		final.w  = 1.0;
		return final;
	}


	vec4 recursiverayTracer(vec4 eyepos, vec4 raydirection){
		vec4 bestBrdf;
		vec4 bestProp;
		vec4 src = eyepos;
		vec4 dir = raydirection;
		vec4 radiancetoEye = vec4(0,0,0,0);
		mat4 bestA;
		vec3 contrib = vec3(1, 1, 1);
		float t;
		for (int i = 0; i < 2; i++){
			t = findBestHit(src, dir, bestA, bestBrdf, bestProp);
			if (t < 0.0){
				radiancetoEye = vec4(0,0,0,1);
				break;
			}
			vec4 r = src + dir * t;

			vec4 n = normalize( r*bestA + bestA*r );
			if (bestBrdf.a < 200.0){
					//diffuse
					radiancetoEye =  shade(r, bestBrdf, n, eyepos, lightPos[0], bestProp, bestA) * vec4(contrib,1);
					break;
			}
			else{
				//mirror
				contrib = contrib * bestBrdf.xyz ;
				n.y += 0.005*sin(r.x*r.y*200.);
				dir = vec4(normalize(reflect(dir.xyz, n.xyz)), 0) ;
				src = r + normalize(n)*0.01;


			}
		
			


		}
		return radiancetoEye;
	}

float rand(float n){return abs(sin(2.*fract(sin(1000.*n) * 43758.5453123)));}


	void main(void) {

		vec4 raydirection = vec4(normalize(rayDir), 0 );
		mat4 bestA;
		vec4 bestProp;
		vec4 bestBrdf;
		vec4 finalColor;
		gl_FragColor =  recursiverayTracer(eyepos, raydirection );

	}
`;


